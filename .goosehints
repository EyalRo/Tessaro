# `.goosehints` – Tessaro Project

This file defines development, testing, build, and deployment workflows for the **Tessaro monorepo**, which uses **FluxCD** for GitOps.

---

## Project Layout

* `apps/admin` → Admin interface (Vite)
* `apps/main` → Customer-facing main app
* `apps/functions` → Serverless functions
* `libs/` → Shared libraries
* `infra/k8s` → Kubernetes manifests (FluxCD + Knative)

---

## FluxCD Workflow

* **Never run commands directly on the Kubernetes cluster.**
* All changes must be expressed by updating manifests in `infra/k8s`.
* After updating manifests, run a Flux reconciliation command to apply them.

```bash
flux reconcile kustomization home
flux get kustomizations
```

---

## Local Development

### Admin App

* Start dev server:

  ```bash
  npm run admin:dev
  ```
* Use custom port:

  ```bash
  PORT=5000 npm run admin:dev
  ```
* API interactions:

  ```bash
  kubectl port-forward svc/users-api-get -n apps 8080:80
  VITE_USERS_API_URL=http://localhost:8080 npm run admin:dev
  ```

### Main App

* Start dev server:

  ```bash
  npm run main:dev
  ```

### Functions

* List Knative services:

  ```bash
  kn service list
  ```
* Port-forward a service:

  ```bash
  kubectl port-forward svc/SERVICE_NAME -n apps PORT:80
  ```

---

## Testing

* Full test suite:

  ```bash
  npm test
  ```
* With coverage:

  ```bash
  npm test -- --coverage
  ```
* Scoped tests:

  ```bash
  npm test -- --testPathPattern=apps/admin
  npm test -- --testPathPattern=libs/ui
  ```

---

## Build & Preview

* Admin app:

  ```bash
  npm run admin:build
  npm run admin:preview
  ```
* Main app:

  ```bash
  npm run main:build
  npm run main:preview
  ```

---

## Code Quality

* Format code:

  ```bash
  npm run format
  ```
* Run linter:

  ```bash
  npm run lint
  ```

---

## Deployment Process

1. Update manifests in `infra/k8s`.
2. Reconcile with Flux:

   ```bash
   flux reconcile kustomization home
   flux get kustomizations
   ```
3. FluxCD ensures the cluster matches the repository state.

---

## Security & Config

* Never commit secrets.
* Copy env file for local use:

  ```bash
  cp .env.sample .env
  ```
* Configuration is managed with ConfigMaps.
* Ensure `tessaro-config` ConfigMap is applied for local development.
